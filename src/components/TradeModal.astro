---
interface Props {
    gameId: string
}


const { gameId } = Astro.props
---
<trade-modal data-gameId={gameId}>
    <p>자신이 건물을 가지고 있는 도시(들) 중 한 곳과, 다른 플레이어들이 건물을 가지고 있는 도시(들) 중 한 곳을 골라, 둘의 건물들을 맞교환합니다.</p>
    <p>(양측의 건물 갯수 차이는 무시합니다.)</p>
    <br/>
    <label>자신의 도시</label><input type="number" value={0} min={0} max={53} id="myInput"/><br/>
    <label>다른 플레이어들의 도시</label><input type="number" value={0}  min={0} max={53} id="othersInput"/>
    <button id="submitBtn">맞교환 수행</button>
</trade-modal>

<script>
    import { BUILDABLE_LOCATIONS, ModalOrNoticeBase } from "@/lib/trlg/types";
import { rooms, sockets } from "@/store";

    class TradeModal extends ModalOrNoticeBase {
        _myTargetLocation: number
        get myTargetLocation() {
            return this._myTargetLocation
        }
        set myTargetLocation(value) {
            this._myTargetLocation = value
            this.submitBtn.disabled = this.disabled
        }
        
        _othersTargetLocation: number
        get othersTargetLocation() {
            return this._othersTargetLocation
        }
        set othersTargetLocation(value) {
            this._othersTargetLocation = value
            this.submitBtn.disabled = this.disabled
        }

        get correctMy0() {
            return BUILDABLE_LOCATIONS.includes(this.myTargetLocation)
        }
        get correctMy1() {
            return rooms.get()[this.gameId].gameContext.mainStatuses.landProperties.locations.includes(this.myTargetLocation) && (rooms.get()[this.gameId].gameContext.mainStatuses.landProperties.map[this.myTargetLocation].operatorId === rooms.get()[this.gameId].gameContext.nowPid)
        }
        get correctOthers0() {
            return BUILDABLE_LOCATIONS.includes(this.othersTargetLocation)
        }
        get correctOthers1() {
            return rooms.get()[this.gameId].gameContext.mainStatuses.landProperties.locations.includes(this.othersTargetLocation) && (rooms.get()[this.gameId].gameContext.mainStatuses.landProperties.map[this.othersTargetLocation].operatorId !== rooms.get()[this.gameId].gameContext.nowPid)
        }

        get disabled() {
            return !(this.correctMy0 && this.correctMy1 && this.correctOthers0 && this.correctOthers1 && (this.myTargetLocation !== this.othersTargetLocation))
        }

        myInput = this.querySelector("#myInput") as HTMLInputElement
        othersInput = this.querySelector("#othersInput") as HTMLInputElement
        submitBtn = this.querySelector("#submitBtn") as HTMLButtonElement

        constructor() {
            super()
            
            this._myTargetLocation = this.myInput.valueAsNumber
            this._othersTargetLocation = this.othersInput.valueAsNumber
            this.submitBtn.disabled = this.disabled

            this.myInput.addEventListener("change", (_) => {
                this.myTargetLocation = this.myInput.valueAsNumber
            })
            this.othersInput.addEventListener("change", (_) => {
                this.othersTargetLocation = this.othersInput.valueAsNumber
            })
            this.submitBtn.addEventListener("click", (_) => {
                sockets[this.gameId].emit("pickTargetsPair", {my: this.myTargetLocation, others: this.othersTargetLocation})
            })
        }
    }
    customElements.define("trade-modal", TradeModal)
</script>