---
import { TRLGClient } from "@/lib/trlg/socket";
import SocketWrapper from "@/components/SocketWrapper.astro";
import type { SerializedGameContext } from "@/lib/trlg/types";
import GameView from "@/components/GameView.astro";
import { rooms } from "@/store";

interface Props {
    gameId: string
}

const { gameId } = Astro.props

---
<wrapped-game-view data-gameId={gameId}>
    <GameView isOnline={rooms.get()[gameId].isOnline} gameContext={rooms.get()[gameId].gameContext} nowPlayerAccount={rooms.get()[gameId].nowPlayerAccount}/>
</wrapped-game-view>

<script>
    import { rooms, tryConnect, type RoomDataType } from "@/store"
    import { TRLGClient } from "@/lib/trlg/socket"
    class WrappedGameView extends HTMLElement {
        updateValue<K extends keyof RoomDataType>(key: K, value: RoomDataType[K]) {
            rooms.get()[this.gameId][key] = value
        }
        gameId = this.dataset.gameId as string
        constructor() {
            super()
            tryConnect(this.gameId,new TRLGClient(
                this.gameId,
                (value) => {this.updateValue("state",value)},
                (value) => {this.updateValue("isOnline",value)},
                (value) => {this.updateValue("gameContext",value)},
                (value) => {this.updateValue("playerId",value)},
                (value) => {this.updateValue("nowPlayerAccount",value)}
            ))
        }
    }
    customElements.define("wrapped-game-view", WrappedGameView)
</script>